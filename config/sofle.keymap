/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * Temporarily here because nice nano v2 spi is not defined on ZMK Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&pinctrl {
    spi3_default: spi3_default {
        group1 { psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>; };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "WS2812";

        /* SPI */

        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <30>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen { zmk,underglow = &led_strip; };
};

/* END temporary RGB support section */

/ {
    combos {
        compatible = "zmk,combos";

        Zpx {
            bindings = <&kp Z>;
            key-positions = <14 13>;
        };

        Qxh {
            bindings = <&kp Q>;
            key-positions = <14 15>;
        };
    };

    behaviors {
        ht_tp_layers: ht_tp_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TP_LAYERS";
            bindings = <&to>, <&sl>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOUBLE_QUOTES>, <&kp GRAVE>;
        };
    };

    macros {
        ak_par: ak_par {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS &sl 3>;
            label = "AK_PAR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  none |  1  |  2  |  3  |  4   |  5   |                        |  6   |  7    |  8     |  9   |   0  | none |
            // |  none |  P  |  X  |  H  |  G   |  J   |                        | #@   | .:    | /*     | "!   |  '?  | none |
            // | SHIFT |  C  |  S  |  N  |  T   |  K   |                        |  ,   |  A    |  E     |  I   |  M   |SHIFT |
            // |  none |  B  |  F  |  L  |  D   |  V   | MUTE |         |EP_TOG |  -   |  U    |  O     |  Y   |  W   | none |
            //               |SUPER| ALT | CTRL |  R   | none |         | none  |SPACE | ENTER | BACKSP |  DEL |

            bindings = <
&none       &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                          &kp N6     &kp N7     &kp N8      &kp N9   &kp N0   &none
&none       &kp P   &kp X   &kp H   &kp G   &kp J                                           &kp SLASH  &kp COMMA  &kp PERIOD  &ak_par  &kp SQT  &none
&kp LSHIFT  &kp C   &kp S   &kp N   &kp T   &kp K                                           &kp ENTER  &kp A      &kp E       &kp I    &kp M    &kp RSHIFT
&none       &kp B   &kp F   &kp L   &kp D   &kp V   &kp C_MUTE           &ext_power EP_TOG  &kp MINUS  &kp U      &kp O       &kp Y    &kp W    &none
                    &none   &none   &none   &kp R   &ht_tp_layers 1 1    &kp TAB            &kp SPACE  &kp ENTER  &kp BSPC    &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        sym_num {
            bindings = <
&none  &none  &none  &none  &none  &none                  &none      &none   &kp FSLH   &kp STAR  &none      &none
&none  &none  &none  &none  &none  &none                  &none      &kp N7  &kp N8     &kp N9    &kp MINUS  &none
&none  &none  &none  &none  &none  &none                  &none      &kp N4  &kp N5     &kp N6    &kp PLUS   &none
&none  &none  &none  &none  &none  &none  &none    &none  &none      &kp N1  &kp N2     &kp N3    &none      &none
              &none  &none  &none  &none  &to 0    &sl 2  &kp EQUAL  &kp N0  &kp COMMA  &kp DOT
            >;
        };

        prog {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp RPAR  &kp LPAR   &none   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp GT    &kp EQUAL  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans     &trans
            >;
        };

        adaptives {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &kp LEFT_PARENTHESIS  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans                &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans                &trans
            >;
        };
    };
};
